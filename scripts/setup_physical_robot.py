#!/usr/bin/env python3
"""
UR Physical Robot Setup and Configuration Tool

This script helps configure and test connections to physical UR robots,
including UR10e models.

Usage:
    python scripts/setup_physical_robot.py [options]
"""

import sys
import argparse
import socket
import time
from pathlib import Path

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from ur_controller import URRobotController


def scan_network_for_robots(network_base: str = "192.168.1") -> list:
    """Scan network for UR robots on common ports."""
    print(f" Scanning {network_base}.0/24 for UR robots...")
    found_robots = []
    
    for i in range(1, 255):
        ip = f"{network_base}.{i}"
        
        # Check RTDE port (29999)
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.5)
            result = sock.connect_ex((ip, 29999))
            sock.close()
            
            if result == 0:
                found_robots.append(ip)
                print(f"✅ Found robot at {ip}")
        except:
            pass
    
    return found_robots


def test_robot_connection(ip: str) -> dict:
    """Test connection to a specific robot."""
    print(f"\n Testing connection to {ip}...")
    
    controller = URRobotController(robot_ip=ip, robot_type="physical")
    
    result = {
        'ip': ip,
        'connected': False,
        'robot_mode': None,
        'safety_mode': None,
        'model': None,
        'version': None
    }
    
    try:
        if controller.connect():
            result['connected'] = True
            print(f"✅ Connected to robot at {ip}")
            
            # Get robot information
            if controller.rtde_r:
                try:
                    result['robot_mode'] = controller.rtde_r.getRobotMode()
                    result['safety_mode'] = controller.rtde_r.getSafetyMode()
                    
                    print(f" Robot mode: {result['robot_mode']}")
                    print(f"  Safety mode: {result['safety_mode']}")
                    
                    # Try to get robot model (this might not be available via RTDE)
                    pose = controller.get_tcp_pose()
                    if pose:
                        print(f" TCP pose: {[round(p, 3) for p in pose]}")
                    
                except Exception as e:
                    print(f"⚠️  Could not get robot status: {e}")
            
            controller.disconnect()
        else:
            print(f"❌ Failed to connect to {ip}")
            
    except Exception as e:
        print(f"❌ Connection error: {e}")
    
    return result


def create_robot_config(ip: str, model: str = "UR10e") -> str:
    """Create a configuration file for a physical robot."""
    config_content = f"""# Configuration for {model} at {ip}
# Generated by setup_physical_robot.py

robot:
  type: "physical"
  ip: "{ip}"
  model: "{model}"
  frequency: 500.0

physical:
  safety:
    max_velocity: 0.5  # m/s - Conservative for safety
    max_acceleration: 1.0  # m/s²
    workspace_limits:
      # UR10e typical workspace (adjust as needed)
      x: [-1.3, 1.3]  # meters
      y: [-1.3, 1.3]  # meters
      z: [0.0, 1.9]   # meters

  network:
    timeout: 5.0

movement:
  default_speed: 0.1  # m/s - Conservative for physical robot
  default_acceleration: 0.3  # m/s²
  responsiveness: 1.0

logging:
  log_dir: "logs"
  level: "INFO"

paths:
  commands_dir: "examples"
  synchronous_commands: "examples/synchronous_deltas.jsonl"
  asynchronous_commands: "examples/asynchronous_deltas.jsonl"
"""
    
    config_filename = f"config/robot_{ip.replace('.', '_')}.yaml"
    
    with open(config_filename, 'w') as f:
        f.write(config_content)
    
    print(f" Created configuration file: {config_filename}")
    return config_filename


def print_setup_instructions():
    """Print setup instructions for physical robots."""
    print("""
 Physical Robot Setup Instructions
=====================================

1. Network Connection:
   - Connect robot to same network as your computer
   - Ensure robot has a static IP or note its DHCP address
   - Check that ports 29999 (RTDE) and 29998 (Dashboard) are open

2. Robot Configuration:
   - On the robot teach pendant, go to Settings → System → Network
   - Note the IP address
   - Ensure External Control URCap is installed if using external control

3. Safety Considerations:
   - Physical robots can cause injury - use appropriate safety measures
   - Start with slow speeds and accelerations
   - Ensure emergency stop is accessible
   - Test in a controlled environment first

4. UR10e Specific Notes:
   - Payload capacity: 10 kg
   - Reach: 1300 mm
   - Typical cycle time: 1.3 s
   - Joint speed: 120°/s
   - Joint acceleration: 350°/s²

5. Testing Connection:
   - Use this script to scan for robots: python scripts/setup_physical_robot.py --scan
   - Test specific IP: python scripts/setup_physical_robot.py --test-ip 192.168.1.100
   - Generate config: python scripts/setup_physical_robot.py --create-config 192.168.1.100

""")


def main():
    """Main setup function."""
    parser = argparse.ArgumentParser(description="UR Physical Robot Setup Tool")
    parser.add_argument("--scan", action="store_true", 
                       help="Scan network for UR robots")
    parser.add_argument("--scan-network", default="192.168.1",
                       help="Network base to scan (default: 192.168.1)")
    parser.add_argument("--test-ip", help="Test connection to specific IP")
    parser.add_argument("--create-config", help="Create config file for robot IP")
    parser.add_argument("--robot-model", default="UR10e",
                       help="Robot model for config file")
    parser.add_argument("--instructions", action="store_true",
                       help="Show setup instructions")
    
    args = parser.parse_args()
    
    print(" UR Physical Robot Setup Tool")
    print("=" * 35)
    
    if args.instructions:
        print_setup_instructions()
        return 0
    
    if args.scan:
        robots = scan_network_for_robots(args.scan_network)
        if robots:
            print(f"\n✅ Found {len(robots)} robot(s)")
            for robot in robots:
                test_robot_connection(robot)
        else:
            print("❌ No robots found")
            print("\n Tips:")
            print("- Check network connection")
            print("- Verify robot IP range")
            print("- Ensure robot is powered on")
        return 0
    
    if args.test_ip:
        result = test_robot_connection(args.test_ip)
        if result['connected']:
            print("\n✅ Connection test successful!")
            create_config = input("Create configuration file? (y/n): ")
            if create_config.lower() == 'y':
                create_robot_config(args.test_ip, args.robot_model)
        else:
            print("\n❌ Connection test failed")
        return 0
    
    if args.create_config:
        create_robot_config(args.create_config, args.robot_model)
        return 0
    
    # Default: show instructions
    print_setup_instructions()
    return 0


if __name__ == "__main__":
    sys.exit(main())
